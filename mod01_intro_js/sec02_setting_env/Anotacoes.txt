1.2.1 Development tools

    Like any other task, programming requires the proper tools and workspace. Software development, in most 
    cases, requires a code editor and a compiler or interpreter of a given language. This is a minimum set, 
    which we can extend as needed with various other tools.

    At this stage of the course, apart from the JavaScript code editor and interpreter, we can also use the
    debugger, which is a tool that allows us, among other things, to pause the program in the indicated place
    and analyze its current state (e.g. the values of the indicated variables).

    The operating system doesn’t matter, as the appropriate tool can be found for Windows, macOS, and Linux.

1.2.2 Online development environment

    Online environments, commonly known as code playgrounds, are sites that act as a simple editor and runtime 
    environment. All of them have similar sets of features. They have different user interfaces, but in 
    principle, they behave in a similar way. They allow you to write code, run it for testing purposes and most 
    often share it with other users.

    In the case of JavaScript, where preparing a fully working local environment actually boils down to 
    installing a code editor and running the browser, they are not as important as regular development 
    environments. They are mainly used as training and testing platforms, or places to publish sample solutions 
    to programming problems.

    Among JavaScript programmers, the most popular are the following:

        * JSFiddle
        * CodePen
        * JsBin
        * Plunker

1.2.3 Local development environment

    As we wrote earlier, the JavaScript requirements for the development environment are very modest. In most
    cases, especially at the beginning of development, just three elements are sufficient: a code editor, an 
    interpreter (i.e. a bootable environment) and a debugger.

    Depending on the level of sophistication, the complexity of the written project, or the environment for 
    which we write our programs (client-side, server-side, mobile), other tools may also be needed.

    These will be, among others:

        * package managers – enabling the management of libraries (containing ready-made solutions that we can 
          use in our programs) or components of the development environment (e.g. npm or yarn)

        * task runners and module bundlers – used, in simple terms, to automate the process of software 
          development and merge the resulting code from many files and libraries (e.g. Grunt or Webpack)

        * testing framework – allows for automatic testing of the correctness of our program in search of 
          potential errors (e.g. Mocha, Jasmine, or Jest)

        * security analyzers – as you can guess, used to control the security of our solution (e.g. Snyk, 
          RetireJS, or OWASP Dependency Check)

    The openness of web development environments is both a blessing and a curse. We have a choice of hundreds
    of components, from which we can create the most comfortable environment for ourselves.

    However, their quantity, plus the dynamic changes of particular tools or even just the trends among 
    programmers make it difficult to keep up with everything that's happening within these environments.

1.2.4 Code editor

    The code of almost all programming languages is composed of some form of text. So, to write the code, we 
    need a text editor. But it needs to be an application that writes plain text (it can't be a rich text 
    editor, like MS Word). In other words, just a plain notepad that can write .txt files is enough to write
    code, although it's much easier if you use a dedicated code editor. The market is full of professional code 
    editors, both free and paid. Some of them are universal, while others are exclusive to specific languages. 
    The main advantage of using a dedicated code editor is syntax highlighting, text autocomplete, and error 
    checking. This improves work efficiency and code understanding, and lowers the number of errors and typos. 
    There are many good code editors, but it can be really hard to select one that works for you.

    Here are some popular ones:

        * Visual Studio Code [Windows, macOS, Linux]
        * WebStorm [Windows, macOS, Linux]
        * Sublime Text [Windows, macOS, Linux]
        * Notepad++ [Windows]

1.2.5 Interpreter

    We have already talked a bit about the interpreter and its role. It functions as a runtime environment for
    our program. It checks whether we have made any formal errors, for example, making a typo in the name of a 
    function or forgetting to close a parenthesis, and then it executes the program instruction by instruction.

    The choice of JavaScript interpreter will depend on which platform we write our software for. For example, 
    if we want to write a simple server-side application, we will almost certainly choose the node.js 
    environment, which we will have to install directly on our operating system. In the case of client-side 
    software, our interpreter will simply be the web browser you already have installed.

1.2.6 Debugger

    Computer programs are complicated beasts, thousands or even millions of lines of code (but calm down, we'll
    start with just a few). With such complexity and size, it’s impossible to produce code without any errors. 
    Some types of errors, especially logical ones (formally, the program is written correctly, but probably we 
    invented the wrong solution to the problem), can only be found while the program is running, and often only
    in special circumstances. It’s really hard to find out what exactly is happening inside a program that runs
    blazing fast, and for those problems, debuggers exist.

    A debugger is a tool that allows you to slow down or even halt the execution of a program, run instructions
    step by step, and look at and analyze the state of the program at any given moment.

    Fortunately, the moment we decided to use the web browser as our boot environment and JavaScript interpreter,
    we also got ourselves a debugger. All modern browsers are equipped with the developer tools. During normal 
    operation, they are invisible, and we have to enable them in the browser options.

    Depending on the browser, we will find various tools there, but there will certainly be:

        * the inspector – which will allow us, for example, to analyze the individual HTML elements of an open
          website;

        * the JavaScript console – which firstly shows all the information about the errors, and secondly 
          allows us to run single JavaScript commands in the context of the current page;

        * the debugger – which, among other things, shows the current values of variables, and allows you to
          pause code execution in the indicated place and to perform step-by-step work (i.e. execute single
          instructions of the program).
    
    How do you enable the developer tools? Unfortunately, there is no single answer; it depends on the browser
    you're using (sometimes also on its version) and the operating system. Browser interfaces change quite often, 
    so it is better to learn the right shortcuts instead of looking for the right option in the menu.

    Try the following key combinations:

        * Windows and Linux operating systems, all common browsers except Internet Explorer and Edge:
            Ctrl + Shift + I
        
        * Windows operating system, Internet Explorer and Edge:
            F12

