1.3.1 The "Hello, World!" Program

    Why "Hello, World!"? For almost 50 years, this sentence, and its derivatives, has marked someone as
    learning a new programming language, although it’s more a tradition than anything else. The phrase was used
    a long time ago in a very important book about the C language, but the text itself doesn't matter.

    The idea is to write out something on the screen using a specific language. First, it allows us to see the
    basic syntax of the language and compare it to other programming languages. Second, it's a very simple 
    program, and anyone can easily write it or copy it from the internet and check if their tools and 
    environment are set up correctly. Third, it’s a program that outputs something, so it provides feedback
    on whether it was executed correctly or not.

    In the case of client-side JavaScript, displaying something on the screen can be understood in two ways.

    First, client-side JavaScript is always executed in the context of a website and allows you to manipulate 
    elements of that website. So we can, for example, use the appropriate function to insert some text, change
    a title, create a table, etc. on the page. This way, we control the visual part of the website.

    Second, we can use the console as a screen to write some information. The console, as we mentioned in the
    previous chapter, is part of the developer tools. So it is not visible by default, and it must be properly 
    enabled (we also wrote about this in the previous chapter). For our needs, it will be much more convenient
    to use the console, as we will avoid the need for a thorough analysis of the structure of the website.

    But what actually is a console? First of all, it is a place where various messages are displayed, normally
    invisible to the browser user. These messages can, for example, be generated by the JavaScript interpreter
    after encountering an error or if we print it, by calling the appropriate function. Secondly, we can run
    individual JavaScript commands in the console, which will be executed in the context of the currently 
    loaded web page.

    The basic function allowing us to write information to the console is console.log.

    So, to refer to the eternal "Hello, World!", we should call it as follows:

        console.log("Hello, World!");

    We can treat the console.log as a function*. In fact, the function is only a log, and console is the object
    to which the function belongs.

    This type of function, belonging to an object, is generally called a method. But once again, for the time
    being, to simplify certain things, let’s assume that this is an ordinary function – it will not bother us
    at all (we'll learn about objects much later).

    The function is a piece of code that allows you to perform a specific task (in our case, to display 
    something on the console). Functions often take arguments, in other words, data that they will use during 
    operation. In JavaScript, we run a function by calling it, and we call it by writing its name followed by a
    pair of parentheses, where the arguments are provided (if the function does not need arguments, the 
    parentheses are left empty). In our example, the argument is the text we want to display. Note that in 
    order to indicate that "Hello, World!" is the text, we put it in quotation marks.

    To let the interpreter know where the command ends, we put a semicolon at the end of the function call. In 
    this case, the interpreter would manage without such help, but it is a good habit to end each command with
    a semicolon, so that you do not forget it when it is really needed.

1.3.2 Online development environment

    In the editor, you should see the piece of code that was just discussed, containing the console.log 
    function. Try to run it. You need to press the highlighted button with the play icon, located directly 
    above the editor.

    As a result, the lower window simulating the console should show:

        Hello, World!

    Go to the editor again and change the word "World" to your name. Start the program again and check what
    appears in the console window. Congratulations, you just modified a program written in JavaScript.

1.3.3 Local development environment

    Client-side JavaScript is a language of the web and exists only in the web ecosystem. In this setup, 
    JavaScript cannot exist by itself. JavaScript code needs to be embedded in an HTML document. When we used
    the online environment to run our program, certain aspects were hidden from us. This time we will have to
    look at them more closely.

    A few words about HTML

        HyperText Markup Language, or HTML for short, is a set of tags used to describe the structure of a
        website. It allows us to give a page the format of a document containing sections, headers, paragraphs,
        lists, and the like. HTML is definitely beyond the scope of the current course, so we will present only
        some basic information about it, just enough for you to understand where and how we can run the 
        JavaScript code associated with a given page.

        Tag types are predefined. For example, the tag that specifies a paragraph is <p> and the tag for the 
        first degree (largest) header is <h1>. The tag name must be placed in angle brackets. Tags are usually 
        used in pairs, limiting a certain area of the document (we have an opening and a closing tag). The 
        closing tag is different from the opening tag, because a slash appears before the name. For example, a 
        paragraph may look like this:

            <p>It's just an ordinary paragraph.</p>

        Often, tags can (and sometimes must) be placed within the range of other tags. For example, our 
        paragraph should be placed inside the <body> tags, which separate the main part of our document.

            <body>
                <p>It's just an ordinary paragraph.</p>
            </body>

    Minimal HTML document

        Let's try to create a minimal HTML that defines an empty page.

            <!DOCTYPE html>
            <html>
                <head>
                    <title>Empty Page</title>
                </head>
                <body>
                </body>
            </html>

        Let's start with the declaration <!DOCTYPE html>. This is not a typical tag, as it is used to 
        inform the browser that the whole document has been prepared according to HTML5. The actual document 
        description starts with the <html> tag, which together with the </html> tag sets the boundaries of the
        document. Every other tag should be inside these. If any given tag holds other content, there will be a
        corresponding closing tag, forming some sort of container.

        The next tag, <head>, contains additional information about the document, which must also be placed in 
        tags. The most basic one is the <title> tag, which sets the title of the page mostly visible in the 
        browser title bar. After <head> there is the <body> element, and the visible content of the web page 
        should be placed there (e.g. our paragraph).